{"version":3,"sources":["order.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;YAMA;gBA8BI;oBA7BA,uEAAuE;oBACvE,UAAK,GAAG,EAAE,CAAC;oBACX,oGAAoG;oBACpG,SAAI,GAAG,EAAE,CAAC;oBACV,eAAU,GAAG,EAAE,CAAC;oBAChB,gBAAW,GAAG,EAAE,CAAC;oBAEjB,kBAAa,GAAW,KAAK,CAAC;oBAG9B,WAAM,GAAG,EAAE,CAAC;oBAOZ,6DAA6D;oBAC7D,oBAAe,GAAG,EAAE,CAAC;oBACrB,eAAU,GAAG,EAAE,CAAC;oBAIhB,yCAAyC;oBACzC,mBAAc,GAAG,EAAE,CAAC;gBAMpB,CAAC;gBAED;;;mBAGG;gBACH,iCAAU,GAAV,UAAW,IAAI;oBACX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtB,2CAA2C;oBAC3C,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBAC7B,CAAC;gBAED;;;mBAGG;gBACH,gCAAS,GAAT,UAAU,IAAI;oBACV,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACrB,4CAA4C;oBAC5C,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;oBACrB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;gBAC9B,CAAC;gBAED;;;;mBAIG;gBACH,kCAAW,GAAX,UAAY,KAAK;oBACb,MAAM,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC;gBAED;;;;mBAIG;gBACH,8BAAO,GAAP,UAAQ,KAAK;oBACT,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;gBACzB,CAAC;gBAED;;;mBAGG;gBACH,gCAAS,GAAT,UAAU,MAAM;oBACZ,IAAI,CAAC,QAAQ,GAAG;wBACZ,IAAI,EAAE,MAAM,CAAC,IAAI;wBACjB,KAAK,EAAE,MAAM,CAAC,KAAK;qBACtB,CAAA;gBACL,CAAC;gBAGD;;;;;;mBAMG;gBACH,0BAAG,GAAH,UAAI,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK;oBACjC,oDAAoD;oBACpD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;wBACvB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAEtC,CAAC;oBAGD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;wBACjD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAEzC,CAAC;oBAGD,4DAA4D;oBAC5D,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;wBACvB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBACrC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEjC,CAAC;oBAGD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;wBACpD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;wBACtC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBACrC,CAAC;gBAEL,CAAC;gBAGD;;;;;;mBAMG;gBACH,6BAAM,GAAN,UAAO,EAAE,EAAE,KAAK,EAAE,IAAI;oBAElB,gBAAgB;oBAChB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC5B,uDAAuD;oBACvD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,KAAK,EAAE,GAAG;wBACpD,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;oBACvB,CAAC,CAAC,CAAC;oBACH,sDAAsD;oBACtD,iDAAiD;oBACjD,IAAI,CAAC,OAAO,GAAG;wBACX,OAAO,EAAE,IAAI,CAAC,EAAE;wBAChB,WAAW,EAAE,IAAI,CAAC,cAAc;qBACnC,CAAC;oBAEF,sCAAsC;oBACtC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAE9B,uDAAuD;oBACvD,iDAAiD;oBACjD,IAAI,CAAC,QAAQ,GAAG;wBACZ,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,WAAW,EAAE,IAAI,CAAC,eAAe;wBACjC,MAAM,EAAE,IAAI,CAAC,UAAU;wBACvB,KAAK,EAAE,IAAI,CAAC,KAAK;qBACpB,CAAC;oBAEF,sCAAsC;oBACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAC9B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAErC,CAAC;gBAlKL;oBAAC,iBAAU,EAAE;;gCAAA;gBAuKb,mBAAC;YAAD,CAtKA,AAsKC,IAAA;YAtKD,uCAsKC,CAAA","file":"order.service.js","sourcesContent":["import {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport {Injectable} from '@angular/core';\n\n\n@Injectable()\nexport class OrderService {\n    //array to hold json objects to send to api to persist data to database\n    order = [];\n    //array to hold similar json objects containing user relevant information to display in angular cart\n    cart = [];\n    itemPrices = [];\n    contactInfo = [];\n    customer:Cust;\n    orderComplete:boolean = false;\n    \n    addOn:AddOn;\n    addOns = [];\n    \n    //////CONFIGITEM PROPERTIES\n    \n    qty:number;\n    qtyMessage:string;\n    \n    //store relevant config item data for display in angular cart\n    cartAdditionals = [];\n    cartPrices = [];\n    total:number;\n    cartItem:ConfigCART;\n\n    //store relevant config item data for api\n    apiAdditionals = [];\n    apiItem:ConfigAPI;\n\n    item:Item;\n\n    constructor() {\n    }\n    \n    /**\n     * push api item interface into api array, clear toppings array for next use\n     * @param item\n     */\n    addToOrder(item) {\n        this.order.push(item);\n        //clear previous array to avoid duplication\n        this.apiAdditionals = [];\n    }\n\n    /**\n     * push client item interface into client array, clear item price and toppings array for next use\n     * @param item\n     */\n    addToCart(item) {\n        this.cart.push(item);\n        //clear previous arrays to avoid duplication\n        this.cartPrices = [];\n        this.cartAdditionals = [];\n    }\n\n    /**\n     * convert cents to dollar/cent format\n     * @param input\n     * @returns {string}\n     */\n    formatPrice(input) {\n        return (input / 100).toFixed(2);\n    }\n\n    /**\n     * calculate tax for cart total\n     * @param price\n     * @returns {number}\n     */\n    calcTax(price) {\n        return price * .0675;\n    }\n\n    /**\n     * store customer details, not in use atm\n     * @param object\n     */\n    storeCust(object) {\n        this.customer = {\n            name: object.name,\n            phone: object.phone,\n        }\n    }\n\n\n    /**\n     * on select box click event add or delete toppings from toppings array\n     * @param idValue\n     * @param nameValue\n     * @param prices\n     * @param event\n     */\n    add(idValue, nameValue, prices, event) {\n        //if checked store addOn ids in array to send to api\n        if (event.target.checked) {\n            this.apiAdditionals.push(idValue);\n\n        }\n            \n        //if UNchecked remove addOn ids from array to send to api\n        else if (!event.target.checked) {\n            let index = this.apiAdditionals.indexOf(idValue);\n            this.apiAdditionals.splice(index, 1);\n\n        }\n \n\n        //store addOn names to array to use for readable cart values\n        if (event.target.checked) {\n            this.cartAdditionals.push(nameValue);\n            this.cartPrices.push(prices);\n\n        }\n\n        //if checked store addOn names in array for readable topping values\n        else if (!event.target.checked) {\n            let index = this.cartAdditionals.indexOf(nameValue);\n            this.cartAdditionals.splice(index, 1);\n            this.cartPrices.splice(index, 1);\n        }\n\n    }\n\n\n    /**\n     * User adds item after config, creates item interfaces and pushes them to their\n     * designated array, cart or api\n     * @param id\n     * @param price\n     * @param item\n     */\n    create(id, price, item) {\n        \n        //add item price\n        this.cartPrices.push(price);\n        //reduce topping array values to a total for item price\n        this.total = this.cartPrices.reduce(function (total, num) {\n            return total + num;\n        });\n        // !!!!!!!!!!!!!!!!!!!FOR API!!!!!!!!!!!!!!!!!!!!!!!//\n        //set interface with selected menuitem and addons\n        this.apiItem = {\n            item_id: item.id,\n            additionals: this.apiAdditionals\n        };\n        \n        //push interface object into API array\n        this.addToOrder(this.apiItem);\n        \n        // !!!!!!!!!!!!!!!!!!!FOR CART!!!!!!!!!!!!!!!!!!!!!!!//\n        //set interface with selected menuitem and addons\n        this.cartItem = {\n            name: item.name,\n            additionals: this.cartAdditionals,\n            prices: this.cartPrices,\n            total: this.total,\n        };\n\n        //push interface object into API array\n        this.addToCart(this.cartItem);\n        this.itemPrices.push(this.total);\n\n    }\n\n\n//////INTEFRFACES\n\n}\n\n/**\n * interface for user info\n */\nexport interface Cust {\n    name:string,\n    phone:string\n}\n\n/**\n * interface to be pushed into api addon array\n */\nexport interface AddOn {\n    id:number,\n    name:string,\n    price:number\n}\n\n/**\n * interface for menu items\n */\nexport interface Item {\n    name:any,\n    id:any,\n    price:any\n}\n\n/**\n * interface for api items\n */\nexport interface ConfigAPI {\n    item_id:any,\n    additionals:any,\n}\n\n/**\n * interface for cart items\n */\nexport interface ConfigCART {\n    name:string,\n    additionals:any,\n    prices:any,\n    total:number,\n}\n"],"sourceRoot":"/source/"}